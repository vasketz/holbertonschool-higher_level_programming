=========================
the ``7-base_geometry`` module
=========================

Using integer_validator(string, int)
-------------------------

This is an exaample test file in .txt format. first import
``BaseGeometry`` from the ``7-base_geometric`` module:

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

===========
Now use it:
===========
>>> bg = BaseGeometry()

Expect output:
¨¨¨¨¨¨¨¨¨¨¨¨¨¨
>>> bg.integer_validator("my_int", 12)

Print errors:
¨¨¨¨¨¨¨¨¨¨¨¨¨
>>> bg.integer_validator("my_int", -12)
Traceback (most recent call last):
...
ValueError: my_int must be greater than 0

>>> bg.integer_validator(12, -12)
Traceback (most recent call last):
...
ValueError: 12 must be greater than 0

>>> bg.integer_validator("my_list", [12, 3])
Traceback (most recent call last):
...
TypeError: my_list must be an integer

>>> bg.integer_validator("my_list")
Traceback (most recent call last):
...
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> bg.integer_validator(12)
Traceback (most recent call last):
...
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> bg.integer_validator("my_list", 2.34)
Traceback (most recent call last):
...
TypeError: my_list must be an integer

>>> bg.integer_validator("my_list", (2, 3))
Traceback (most recent call last):
...
TypeError: my_list must be an integer

>>> bg.integer_validator()
Traceback (most recent call last):
...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> bg.integer_validator("my_list", 2, 4)
Traceback (most recent call last):
...
TypeError: integer_validator() takes 3 positional arguments but 4 were given